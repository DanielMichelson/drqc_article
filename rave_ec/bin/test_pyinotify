#!/usr/bin/python
'''
Copyright (C) 2016 The Crown (i.e. Her Majesty the Queen in Right of Canada)

This file is an add-on to RAVE.

RAVE is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

RAVE is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with RAVE.  If not, see <http://www.gnu.org/licenses/>.

'''
## tests pyinotify
#

## 
# @file
# @author Daniel Michelson, Environment and Climate Change Canada
# @date 2016-02-02

import sys, os, pyinotify

ROOT = '.' 
PATH, ifstr = os.path.split(ROOT)
if PATH == '': 
  PATH = os.path.abspath(os.path.dirname(ROOT))
  ROOT = os.path.join(PATH, ROOT)

#ROOT = '/home/vagrant/projects/olympex' 
PIDFILE = ROOT + '/test.pid'
LOGFILE = ROOT + '/test.log'
LOGFILESIZE = 5000000  # 5 Mb each
LOGFILES = 5

MASK = pyinotify.IN_CLOSE_WRITE
#MASK = pyinotify.IN_MOVE_SELF


## Determines whether the daemon is running, based on the PID in the PIDFILE.
# @return True if the daemon is running, otherwise False
def alive(pidfile):
  if os.path.isfile(pidfile):
    fd = open(pidfile)
    c = fd.read()
    fd.close()
    try:
      pgid = os.getpgid(int(c))
      return True
    except:
      return False
  else:
    return False


## Kills the daemon, first softly, then hard if necessary.
def killme(pidfile):
  import signal
  try:
    fd = open(options.pid_file)
    c = fd.read()
    fd.close()
    try:
      os.kill(int(c), signal.SIGHUP)
    except:
      os.kill(int(c), signal.SIGKILL)
    os.remove(options.pid_file)
  except:
    print "Could not kill daemon. Check pid."


## Processes all the files that have arrived in the input directory.
# While catchup() is grinding through a long list of files, new ones can
# arrive and they'll be ignored unless this functionality is looped.
# @param in_dir string containing the input directory to be monitored
# @param janitor boolean saying whether or not to delete inbound files
def catchup(in_dir, janitor):
  import glob
  not_removed = []
  while 1:
    flist = sorted(glob.glob(os.path.join(in_dir, '*')), key=os.path.getmtime, reverse=True)
    if len(flist) == 0 or set(flist) == set(not_removed):
      break
    else:
      not_removed = []
      for fstr in flist:
        if not MAIN(fstr, janitor):
          not_removed.append(fstr)


## Removes a file
# @param fname file string
# @returns True of False
def remove_file(fname):
  try:
    os.remove(fname)
    return True
  except Exception, e:
    pyinotify.log.error("Failed to remove file '%s': %s" % (fname, e.__str__()))
  return False


## Main function, queries the input file, injects it to the BALTRAD node if
# it is ODIM_H5 and the "janitor" is turned off. The input file is deleted
# afterwards.
# @param in_file string containing the full path and file name of an input file
# @param janitor boolean saying whether or not to delete this file instead of
# inject it
# @return True if file successfully was removed, otherwise False
def MAIN(in_file, janitor=False):
  """
  The main action to take within the main loop.
  Assume that in_file contains an absolute path.
  """
  removed = False
    
  if os.path.isfile(in_file):
    if os.path.getsize(in_file) != 0:

        try:
            pyinotify.log.info("Found %s" % in_file)

            if janitor: removed = remove_file(in_file)

        except Exception, e:
            pyinotify.log.error("Error converting file %s: %s" % (in_file, e.__str__()))

    else:
      pyinotify.log.warn(in_file + " is zero length, removed.")
      removed = remove_file(in_file)
  else:
    pyinotify.log.warn(in_file + " not a regular file, ignored.")
    
  return removed


# This class, and especially its method, overrides the default process
# in (py)inotify
class EventAction(pyinotify.ProcessEvent):
  ## Initializer
  # @param options variable options list
  def __init__(self, options):
    self.options = options

  ## Inherited from pyinotify
  # @param event object containing a path, probably ...
  def process_IN_CLOSE_WRITE(self, event):
    pyinotify.log.info("IN_CLOSE_WRITE: %s" % event.pathname)
    MAIN(event.pathname, janitor=self.options.janitor)

  ## Inherited from pyinotify
  # @param event object containing a path, probably ...
  def process_IN_MOVE_SELF(self, event):
    pyinotify.log.info("IN_MOVE_SELF: %s" % event.pathname)
    MAIN(event.pathname, janitor=self.options.janitor)


if __name__ == "__main__":
  from optparse import OptionParser
  import logging, logging.handlers

  usage = "usage: %prog -i <input dir> -p <pidfile> -l <logfile> [hkcj]"
  usage += ""
  parser = OptionParser(usage=usage)

  parser.add_option("-i", "--indir", dest="in_dir",
                    default=ROOT,
                    help="Name of input directory to monitor.")

  parser.add_option("-p", "--pidfile", dest="pid_file",
                    default=PIDFILE,
                    help="Name of PID file to write.")

  parser.add_option("-l", "--logfile", dest="log_file",
                    default=LOGFILE,
                    help="Name of rotating log file.")

  parser.add_option("-c", "--catchup", action="store_true", dest="catchup",
                    help="Process all files that have collected in the input directory. Otherwise only act on new files arriving.")

  parser.add_option("-j", "--janitor", action="store_true", dest="janitor",
                    help="Remove files that arrive in the input directory.")

  parser.add_option("-k", "--kill", action="store_true", dest="kill",
                    help="Attempt to kill a running daemon.")

  (options, args) = parser.parse_args()

  if not options.kill:
    ALIVE = alive(options.pid_file)
    if not ALIVE and os.path.isfile(options.pid_file):
      print "test_pyinotify.py is not alive but pid file %s exists, removing." % options.pid_file
      os.remove(options.pid_file)
    elif ALIVE:
      print "test_pyinotify.py is already running."
      sys.exit()

    # Shut down a previous incarnation of this daemon.
  if options.kill:
    killme(options.pid_file)
    sys.exit()

    # Start the logging system
  pyinotify.log.setLevel(logging.INFO)
  handler = logging.handlers.RotatingFileHandler(options.log_file,
                                                 maxBytes=LOGFILESIZE,
                                                 backupCount=LOGFILES)
#  formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s',
#                                '%Y-%m-%d %H:%M:%S %Z')
  formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')

  handler.setFormatter(formatter)
  pyinotify.log.addHandler(handler)
    
  # Process files that have arrived since I was running last.
  if options.catchup:
    catchup(options.in_dir, options.janitor)

  wm = pyinotify.WatchManager()
  notifier = pyinotify.Notifier(wm, EventAction(options))

  # Only act on closed files, or whatever's been moved into in_dir
  wm.add_watch(options.in_dir, MASK)

  notifier.loop(daemonize=True, pid_file=options.pid_file)
